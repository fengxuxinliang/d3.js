<!DOCTYPE html>
<html>
<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body>

</body>
</html>
<script>

//通用代码
var observer = {
    //订阅
    addSubscriber: function (obj) {
        console.log(this.nick + '添加' + obj.nick + '为订阅者，有变化会通知他' );
        this.subscribers[this.subscribers.length] = obj;
    },
    //退订
    removeSubscriber: function (obj) {
        for (var i = 0; i < this.subscribers.length; i++) {
            if (this.subscribers[i] === obj) {
                delete (this.subscribers[i]);
            }
        }
    },
    //发布
    notify: function (what) {
        for (var i = 0; i < this.subscribers.length; i++) {
            this.subscribers[i].update(what);
        }
    },
    // 将对象o具有观察者功能
    make: function (o) { 
        for (var i in this) {
            o[i] = this[i];
            o.subscribers = [];
        }
    },

    //主动订阅
    subscrib:function(obj){
        if(obj.addSubscriber){
            console.log( this.nick + '主动订阅了' + obj.nick );
            obj.addSubscriber(this);
        }
    }
};



var svg  =d3.select('body').append('svg')
      .attr('width',5000)
      .attr('height',1000);

var
                
Rect =( function(){
    function Rect(name, x, y, color){
        this.nick = name;
        this.x = x;
        this.y = y;
        this.color = color;

        this.graph = null;
    }

    

    Rect.prototype.bindDrag =function(graph){
        var thisRect = this;
        var drag = d3.behavior.drag()
                .on("drag", function() {
                    console.log('你在拖'+thisRect.nick);
                    thisRect.dragmove();
                });
        graph.call(drag);
    } 

    Rect.prototype.draw = function(){
        var _this = this;
        console.log( _this );
        this.graph = svg.append('rect')
            .attr('x', _this.x)
            .attr('y', _this.y)
            .attr('width', 100)
            .attr('height', 100)
            .attr('fill', this.color)
            .call(Rect.prototype.bindDrag.bind(_this));

        this.graph
            .on('dbclick', function() {
                _this.jump.call(_this);
            })


        observer.make( this );
    }  


    Rect.prototype.dragmove = function(){
        thisGraph = this;
        this.x += d3.event.dx;
        this.y += d3.event.dy;


        this.graph
            .attr('x', this.x)
            .attr('y', this.y);

        var msg = { };
        msg.type = 'move';
        msg.data = { };
        msg.data.dx = d3.event.dx;
        msg.data.dy = d3.event.dy;
        this.notify( msg );

    }


    Rect.prototype.update = function(msg){

        if(msg.type=='move'){
            this.x += msg.data.dx;
            this.y += msg.data.dy;

            console.log(this.nick+"在跟着动！！");

            this.graph
                .attr('x', this.x)
                .attr('y', this.y);
        }
        

        if(msg.type=='jump'){
            this.jump();
        }
    }

    Rect.prototype.jump = function(){
        thisGraph = this; 
        console.log(this.nick + ' jump!!!');

       setTimeout(function(){
            console.log( thisGraph.nick + '通知下一个' );
            var msg = { };
            msg.type = 'jump';
            thisGraph.notify.call(thisGraph, msg);
       }, 1000)
    }


    return Rect;
})();
  
var R1 = new Rect('小红',50, 50,'red');
R1.draw()

var R2 = new Rect('小黄',200, 200,'yellow');
R2.draw()
var R3 = new Rect('小蓝',400, 400, 'blue');
R3.draw()


R1.addSubscriber(R2);
R2.addSubscriber(R3);
// R3.subscrib(R2);

</script>
